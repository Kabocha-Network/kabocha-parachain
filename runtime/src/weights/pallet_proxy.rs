
//! Autogenerated weights for `pallet_proxy`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-21, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ubuntu-s-kabocha-01-1627404188468-s-2vcpu-4gb-intel-lon1-01`, CPU: `DO-Regular`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/parachain-collator
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_proxy
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// runtime/src/weights/pallet_proxy.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_proxy`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_proxy::WeightInfo for WeightInfo<T> {

	// Storage: Proxy Proxies (r:1 w:0)
	/// The range of component `p` is `[1, 31]`.
	fn proxy(p: u32, ) -> Weight {
		// Minimum execution time: 24_285 nanoseconds.
		Weight::from_ref_time(25_355_667 as u64)
			// Standard Error: 1_468
			.saturating_add(Weight::from_ref_time(38_185 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: Proxy Proxies (r:1 w:0)
	// Storage: Proxy Announcements (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `a` is `[0, 31]`.
	/// The range of component `p` is `[1, 31]`.
	fn proxy_announced(a: u32, p: u32, ) -> Weight {
		// Minimum execution time: 44_948 nanoseconds.
		Weight::from_ref_time(44_762_064 as u64)
			// Standard Error: 1_778
			.saturating_add(Weight::from_ref_time(118_940 as u64).saturating_mul(a as u64))
			// Standard Error: 1_837
			.saturating_add(Weight::from_ref_time(51_232 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Proxy Announcements (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `a` is `[0, 31]`.
	/// The range of component `p` is `[1, 31]`.
	fn remove_announcement(a: u32, p: u32, ) -> Weight {
		// Minimum execution time: 31_274 nanoseconds.
		Weight::from_ref_time(32_219_165 as u64)
			// Standard Error: 1_832
			.saturating_add(Weight::from_ref_time(132_454 as u64).saturating_mul(a as u64))
			// Standard Error: 1_893
			.saturating_add(Weight::from_ref_time(9_077 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Proxy Announcements (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `a` is `[0, 31]`.
	/// The range of component `p` is `[1, 31]`.
	fn reject_announcement(a: u32, p: u32, ) -> Weight {
		// Minimum execution time: 31_219 nanoseconds.
		Weight::from_ref_time(32_439_563 as u64)
			// Standard Error: 1_829
			.saturating_add(Weight::from_ref_time(120_251 as u64).saturating_mul(a as u64))
			// Standard Error: 1_890
			.saturating_add(Weight::from_ref_time(8_689 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Proxy Proxies (r:1 w:0)
	// Storage: Proxy Announcements (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `a` is `[0, 31]`.
	/// The range of component `p` is `[1, 31]`.
	fn announce(a: u32, p: u32, ) -> Weight {
		// Minimum execution time: 40_388 nanoseconds.
		Weight::from_ref_time(40_718_245 as u64)
			// Standard Error: 1_821
			.saturating_add(Weight::from_ref_time(129_674 as u64).saturating_mul(a as u64))
			// Standard Error: 1_882
			.saturating_add(Weight::from_ref_time(56_001 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Proxy Proxies (r:1 w:1)
	/// The range of component `p` is `[1, 31]`.
	fn add_proxy(p: u32, ) -> Weight {
		// Minimum execution time: 33_997 nanoseconds.
		Weight::from_ref_time(34_840_036 as u64)
			// Standard Error: 1_659
			.saturating_add(Weight::from_ref_time(71_349 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Proxy Proxies (r:1 w:1)
	/// The range of component `p` is `[1, 31]`.
	fn remove_proxy(p: u32, ) -> Weight {
		// Minimum execution time: 33_900 nanoseconds.
		Weight::from_ref_time(35_069_110 as u64)
			// Standard Error: 1_848
			.saturating_add(Weight::from_ref_time(82_380 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Proxy Proxies (r:1 w:1)
	/// The range of component `p` is `[1, 31]`.
	fn remove_proxies(p: u32, ) -> Weight {
		// Minimum execution time: 29_627 nanoseconds.
		Weight::from_ref_time(30_641_642 as u64)
			// Standard Error: 1_495
			.saturating_add(Weight::from_ref_time(51_919 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Proxy Proxies (r:1 w:1)
	/// The range of component `p` is `[1, 31]`.
	fn create_pure(p: u32, ) -> Weight {
		// Minimum execution time: 37_761 nanoseconds.
		Weight::from_ref_time(38_748_697 as u64)
			// Standard Error: 1_594
			.saturating_add(Weight::from_ref_time(19_022 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Proxy Proxies (r:1 w:1)
	/// The range of component `p` is `[0, 30]`.
	fn kill_pure(p: u32, ) -> Weight {
		// Minimum execution time: 31_145 nanoseconds.
		Weight::from_ref_time(31_933_568 as u64)
			// Standard Error: 1_492
			.saturating_add(Weight::from_ref_time(50_250 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}
